JOINS ====================================================
1
-- select * 
-- from invoice i join invoice_line il
-- on i.invoice_id = il.invoice_id
-- where unit_price > 0.99;
2
-- select invoice_date, first_name, last_name, total 
-- from invoice i join customer c
-- on i.customer_id = c.customer_id;
3
-- select c.first_name AS CUST_first, 
-- c.last_name AS CUST_last, 
-- e.first_name AS REP_first, 
-- e.last_name AS REP_last
-- from customer c join employee e
-- on c.support_rep_id = e.employee_id;
4
-- select ar.name, al.title
-- from album al join artist ar
-- on al.artist_id = ar.artist_id;
5
-- select pt.track_id
-- from playlist_track pt join playlist pl
-- on pt.playlist_id = pl.playlist_id
-- where pl.name = 'Music';
6
-- select t.name
-- from track t join playlist_track pt
-- on t.track_id = pt.track_id
-- where pt.playlist_id = 5;
7
-- select t.name, pl.name
-- from track t 
-- join playlist_track pt on t.track_id = pt.track_id
-- join playlist pl on pt.playlist_id = pl.playlist_id;
8
-- select t.name, al.title
-- from track t
-- join album al on t.album_id = al.album_id
-- join genre g on t.genre_id = g.genre_id
-- where g.name = 'Alternative & Punk';
*BD*
-- select t.name, g.name, al.title, ar.name
-- from track t
-- join genre g on t.genre_id = g.genre_id
-- join album al on t.album_id = al.album_id
-- join artist ar on al.artist_id = ar.artist_id
-- join playlist_track pl on t.track_id = pl.track_id
-- join playlist p on pl.playlist_id = p.playlist_id
-- where p.name = 'Music';

NESTED QUERIES ======================================================
1
-- select * from invoice
-- where invoice_id in (
-- 	select invoice_id from invoice_line
--   where unit_price > 0.99
-- );
2
-- select * from playlist_track
-- where playlist_id in (
--   select playlist_id from playlist
--   where name = 'Music'
--   )
3
-- select name from track
-- where track_id in (
--   select track_id from playlist_track
--   where playlist_id = 5
--   );
4
-- select * from track
-- where genre_id in (
-- 	select genre_id from genre
--   where name = 'Comedy'
--   );
5
-- select * from track
-- where album_id in (
--   select album_id from album
--   where name = 'Fireball'
-- 	);
6
-- select * from track
-- where album_id in (
--   select album_id from album
--   where artist_id in (
-- 		select artist_id from artist
--     where name = 'Queen'
--   	)
--   );

UPDATING ROWS=============================================================
1
-- update customer
-- set fax = null
-- where fax IS NOT null;
2
-- update customer
-- set company = 'Self'
-- where company is null;
3
-- update customer
-- set last_name = 'Thompson'
-- where first_name = 'Julia'
-- and last_name = 'Barnett';
4
-- update customer 
-- set support_rep_id = 4
-- where email = 'luisrojas@yahoo.cl';
5
-- update track
-- set composer = 'The darkness around us'
-- where genre_id = (select genre_id from genre where name = 'Metal')
-- and composer is null;

GROUP BY===================================================================
1
-- select count(*), g.name
-- from track t join genre g
-- on t.genre_id = g.genre_id
-- group by g.name;
2
-- select count(*), g.name
-- from track t join genre g
-- on t.genre_id = g.genre_id
-- where g.name in ('Pop','Rock')
-- group by g.name;
3
-- select ar.name, count(*)
-- from album al join artist ar
-- on al.artist_id = ar.artist_id
-- group by ar.name;

USE DISTINCT================================================================
1
-- select DISTINCT composer from track;
2
-- select distinct billing_postal_code
-- from invoice;
3
-- select distinct company from customer;

DELETE ROWS=================================================================
1
-- delete from practice_delete 
-- where type = 'bronze';
2
-- delete from practice_delete
-- where type = 'silver';
3
-- delete from practice_delete 
-- where value = 150;

eCOMMERCE SIMULATION========================================================
-- create table users (
--   user_id serial primary key,
--   name varchar(100),
--   email varchar(100)
-- );

-- create table products (
--   product_id serial primary key,
--   name varchar(100),
--   price INT
-- );

-- create table orders (
--   order_id serial primary key,
--   product_id int references products(product_id),
--   order_invoice int
-- );

-- insert into users (name, email)
-- values 
-- ('Tony', 'theTiger@gmail.com'),
-- ('Sam', 'theTucan@gmail.com'),
-- ('Chester', 'theCheetah@gmail.com');

-- insert into products (name, price)
-- values 
-- ('Cereal', 4),
-- ('Milk', 2),
-- ('Spoon', 1);

-- insert into orders (order_invoice, product_id)
-- values (1,2),(1,3),(1,3),(2,1),(3,2),(2,1),(3,3);

-- select product_id from orders
-- where order_invoice = 1;

-- select distinct order_invoice, count(order_invoice) as items from orders
-- group by order_invoice;

-- select sum(p.price) from orders o
-- join products p on p.product_id = o.product_id
-- where o.order_invoice = 1;

-- alter table orders 
-- add column user_id int references users(user_id);

-- update orders
-- set user_id = 1
-- where order_invoice = 1;

-- update orders
-- set user_id = 2
-- where order_invoice = 2;

-- update orders
-- set user_id = 3
-- where order_invoice = 3;

-- select * from orders
-- where user_id = 2;

-- select u.name, count(o.order_id)
-- from orders o join users u on o.user_id = u.user_id
-- group by u.name;

-- select u.name, sum(p.price) as total
-- from orders o 
-- join users u on o.user_id = u.user_id
-- join products p on o.product_id = p.product_id
-- group by u.name;
